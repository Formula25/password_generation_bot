import sqlite3
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
import message_texts
import password
from aiogram.dispatcher.filters import Text
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import os
from rich import print


#sqlite3.connect(

#–í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
print("[green]–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω![/green]")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
#TOKEN = os.getenv("TOKEN")
#bot = Bot(token=TOKEN)
bot = Bot(token="5552245555:AAEfGwuZIfRmgTBujfeqsvBQkThGeB9BptM")
dp = Dispatcher(bot)


# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
pass_btn = InlineKeyboardMarkup(row_width=1)
easy_pass_btn = InlineKeyboardButton(text='–õ–µ–≥–∫–∏–π –ø–∞—Ä–æ–ª—å', callback_data="easy")
medium_pass_btn = InlineKeyboardButton(text='–°—Ä–µ–¥–Ω–∏–π –ø–∞—Ä–æ–ª—å', callback_data="medium")
hard_pass_btn = InlineKeyboardButton(text='–°–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å', callback_data="hard")
pass_btn.add(easy_pass_btn, medium_pass_btn, hard_pass_btn)

# –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –µ—â–µ –æ–¥–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(commands="start")
async def cmd_start(msg: types.Message):
    # –í—ã–≤–æ–¥ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–µ—Ä–µ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await bot.send_photo(
            msg.from_user.id,  
            types.InputFile("/Users/arseniitaturevich/code/password_gen_bot/img/9bf70e1154de93a5.png"))
    kb = [
        [
            types.KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ø–∞—Ä–æ–ª—å üé∞"),
            types.KeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"),
            types.KeyboardButton(text="–°–æ–≤–µ—Ç—ã –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        ],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
    )
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
    await msg.answer(
            f"–ü—Ä–∏–≤–µ—Ç–∏–∫, {msg.from_user.first_name}!\n{message_texts.HELLO}",
            reply_markup=keyboard
            )


right_commands = ("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–æ–∑–¥–∞—Ç—å –ø–∞—Ä–æ–ª—å üé∞", "–°–æ–≤–µ—Ç—ã –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")


# –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –ø–∞—Ä–æ–ª—å"
@dp.message_handler(lambda message: message.text == '–°–æ–∑–¥–∞—Ç—å –ø–∞—Ä–æ–ª—å üé∞')
async def url_command(message: types.Message):
   await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è:', reply_markup=pass_btn)


# –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
@dp.message_handler(lambda message: message.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def information(message: types.Message):
    await message.answer(message_texts.INFO)


# –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–°–æ–≤–µ—Ç—ã –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
@dp.message_handler(lambda message: message.text == "–°–æ–≤–µ—Ç—ã –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
async def tips(message: types.Message):
    await message.answer(message_texts.TIPS)


# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≥–æ, –∫–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–æ—Ç–∞
@dp.message_handler(lambda message: message.text not in right_commands)
async def wrong_commands(message: types.Message):
    await bot.send_message(
            message.from_user.id,
            message_texts.WRONG_COMMAND, 
            reply_to_message_id=message.message_id
            )


# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /info
@dp.message_handler(commands="info")
async def info(msg: types.Message):
    await msg.answer(message_texts.INFO)


# –í—ã–≤–æ–¥ –ø–∞—Ä–æ–ª–µ–π –ø–æ —É—Ä–æ–≤–Ω—é —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π
@dp.callback_query_handler()
async def callback_password(callback_query: types.CallbackQuery):
    code = callback_query.data
    if code ==  "easy":
        get_password = password.easy_pass_gen()
        await bot.send_message(
                callback_query.from_user.id, 
                text=f'–í–∞—à –ø–∞—Ä–æ–ª—å: \n\n`{get_password}`',
                parse_mode="MARKDOWN"
                )
        print(f"–ü–∞—Ä–æ–ª—å: {get_password}\n–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: {callback_query.from_user.username}")
        print("-")
    elif code == "medium":
        get_password = password.medium_pass_gen()
        await bot.send_message(
                callback_query.from_user.id, 
                text=f'–í–∞—à –ø–∞—Ä–æ–ª—å: \n\n`{get_password}`',
                parse_mode="MARKDOWN"
                )
        print(f"–ü–∞—Ä–æ–ª—å: {get_password}\n–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: {callback_query.from_user.username}")
        print("-")
    elif code == "hard":
        get_password = password.hard_pass_gen()
        await bot.send_message(
                callback_query.from_user.id, 
                text=f'–í–∞—à –ø–∞—Ä–æ–ª—å: \n\n`{get_password}`',
                parse_mode="MARKDOWN"
                )
        print(f"–ü–∞—Ä–æ–ª—å: {get_password}\n–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: {callback_query.from_user.username}")
        print("-")


@dp.message_handler(commands="tips")
async def get_tips(msg: types.Message):
    await msg.answer(message_texts.TIPS)


if __name__ == '__main__':
    executor.start_polling(dp)

